/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

/ {
    chosen {
        zmk,kscan = &kscan0;
        zmk,matrix_transform = &default_transform;
        zephyr,code-partition = &code_partition;
    };

    leds {
		compatible = "gpio-leds";
        ledu1: led_u1 {
            gpios = <&feather_header 3 GPIO_ACTIVE_HIGH>;
            label = "CAP LED";
            status = "okay";
        };
        ledu2: led_u2 {
            gpios = <&feather_header 4 GPIO_ACTIVE_HIGH>;
            label = "NUM LED";
            status = "okay";
        };
        ledu3: led_u3 {
            gpios = <&feather_header 16 GPIO_ACTIVE_HIGH>;
            label = "SCR LED";
            status = "okay";
        };
        ledu4: led_u4 {
            gpios = <&feather_header 15 GPIO_ACTIVE_HIGH>;
            label = "KEY LED";
            status = "okay";
        };
        led_pow: led_pow {
            gpios = <&feather_header 5 GPIO_ACTIVE_HIGH>;
            label = "BUTTON LED";
            status = "okay";
        };
    };

	pwmleds {
		compatible = "pwm-leds";
		pwm_ledu1: pwm_led_u1 {
			pwms = <&pwm0 28>;
			label = "PWM CAP LED";
		};
		pwm_ledu2: pwm_led_u2 {
			pwms = <&pwm0 2>;
			label = "PWM NUM LED";
		};
		pwm_ledu3: pwm_led_u3 {
			pwms = <&pwm0 26>;
			label = "PWM SCR LED";
		};
        pwm_ledu4: pwm_led_u4 {
			pwms = <&pwm0 7>;
			label = "KEY SCR LED";
		};
        pwm_led_pow: pwm_led_pow {
			pwms = <&pwm0 3>;
			label = "PWM BUTTON LED";
		};
    };

    kscan0: kscan {
        compatible = "zmk,kscan-gpio-matrix";
        label = "KSCAN";
        
        diode-direction = "col2row";
        row-gpios
            = <&feather_header 2  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&feather_header 1  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&feather_header 0  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
        col-gpios
            = <&feather_header 3  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&feather_header 4  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            , <&feather_header 5  (GPIO_ACTIVE_LOW | GPIO_PULL_UP)>
            ;
    };

vbatt {
		compatible = "zmk,battery-voltage-divider";
		label = "BATTERY";
		io-channels = <&adc 5>;
		output-ohms = <100000>;
		full-ohms = <(100000 + 100000)>;
	};

//
// Matrix layout from:
// https://web.archive.org/web/20201101000000*/http://humblehacker.com/blog/20100720/hacking-the-kinesis-contoured-keyboard/
//    	0	1	2	3	4	5	6	7	8	9	10	11	12	13	14
// 0    =	1	2	3	4	5	6	7	8	9	0	-	ESC	F1	F2
// 1	TB	Q	W	E	R	T	Y	U	I	O	P		F3	F4	F5
// 2	CP	A	S	D	F	G	H	J	K	L	;	â€˜	F6	F7	F8
// 3	LS	Z	X	C	V	B	N	M	,	.	/	RS	F9	F10	F11
// 4	X2	`	IN	LT		RT	UP		DN	[	]	X1	F12	PS	SL
// 5			SL1	SL2		SL5	SR4	SR3	SR6				PB	PG	KY
// 6				SL4	SL3	SL6	SR1		SR2	SR5				
// 
default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <3>;
        rows = <3>;
   map = <
   RC(0,12)  RC(0,13)  RC(0,14)
   RC(0,0)  RC(0,1)  RC(0,2)
   RC(1,0)  RC(1,1)  RC(1,2)
        >;
    };
};

&pwm0 {
	status = "okay";
	ch0-pin = <28>;
	ch0-inverted;
	ch1-pin = <2>;
	ch1-inverted;
	ch2-pin = <26>;
	ch2-inverted;
	ch3-pin = <7>;
	ch3-inverted;
};

&adc {
	status = "okay";
};


&flash0 {
    /delete-node/ partitions;
};

&flash0 {
	partitions {
		compatible = "fixed-partitions";
		#address-cells = <1>;
		#size-cells = <1>;

		sd_partition: partition@0 {
			label = "softdevice";
			reg = <0x00000000 0x00026000>;
		};
		code_partition: partition@26000 {
			label = "code_partition";
			reg = <0x00026000 0x000c6000>;
		};

		/*
		 * The flash starting at 0x000ec000 and ending at
		 * 0x000f3fff is reserved for use by the application.
		 */

		/*
		 * Storage partition will be used by FCB/LittleFS/NVS
		 * if enabled.
		 */
		storage_partition: partition@ec000 {
			label = "storage";
			reg = <0x000ec000 0x00008000>;
		};

		boot_partition: partition@f4000 {
			label = "adafruit_boot";
			reg = <0x000f4000 0x0000c000>;
		};
	};
};
